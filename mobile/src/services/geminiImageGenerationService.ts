// SECURITY UPDATE: Migrating to secure backend API
// Direct Gemini API calls expose API keys in client bundle
// See MIGRATION_TO_SECURE_API.md for details

/**
 * Gemini Image Generation Service (SECURE VERSION)
 * Uses backend proxy to hide API keys from client
 * TODO: Implement /api/gemini/generate-image endpoint in backend
 */

export interface GeminiImageRequest {
  prompt: string;
  originalImageUrl?: string;
  style: string;
  qualityLevel: 'draft' | 'standard' | 'premium';
  aspectRatio?: '1:1' | '16:9' | '9:16' | '4:3';
  iterativeRefinement?: boolean;
}

export interface GeminiImageResult {
  imageUrl: string;
  base64Data?: string;
  prompt: string;
  generationTime: number;
  model: string;
  success: boolean;
  watermarked: true; // All Gemini images have SynthID watermarks
  metadata: {
    modelUsed: string;
    promptLength: number;
    hasOriginalImage: boolean;
  };
}

export class GeminiImageGenerationService {
  private static instance: GeminiImageGenerationService;
  private apiBaseUrl: string;

  private constructor() {
    // Use secure backend API instead of exposed client-side API key
    this.apiBaseUrl = process.env.EXPO_PUBLIC_API_BASE_URL || 'http://localhost:3000/api';
    console.log('GeminiImageGenerationService: Using secure backend API');
  }

  public static getInstance(): GeminiImageGenerationService {
    if (!GeminiImageGenerationService.instance) {
      GeminiImageGenerationService.instance = new GeminiImageGenerationService();
    }
    return GeminiImageGenerationService.instance;
  }

  /**
   * Generate interior design image using secure backend API
   * TODO: Implement /api/gemini/generate-image endpoint in backend
   */
  async generateInteriorDesign(request: GeminiImageRequest): Promise<GeminiImageResult> {
    const startTime = Date.now();
    
    try {
      console.log('üé® [SECURE] Generating interior design via backend...', request.prompt.substring(0, 100) + '...');
      
      // TODO: Implement backend endpoint for image generation
      console.warn('‚ö†Ô∏è Image generation backend endpoint not yet implemented');
      console.log('üìù TODO: Add POST /api/gemini/generate-image endpoint to backend-vercel/api/gemini/');
      
      // For now, return a fallback response
      return this.getFallbackImageResult(request, startTime);
      
      /* TODO: Implement backend API call when endpoint is ready
      const response = await fetch(`${this.apiBaseUrl}/gemini/generate-image`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          prompt: request.prompt,
          style: request.style,
          qualityLevel: request.qualityLevel,
          originalImageUrl: request.originalImageUrl,
          aspectRatio: request.aspectRatio,
        }),
      });

      const result = await response.json();
      if (!response.ok) {
        throw new Error(result.error || 'Image generation failed');
      }

      return result.data;
      */
        try {
          const rawImageData = await this.fetchImageAsBase64(request.originalImageUrl);
          
          // Ensure format is supported by Gemini
          const imageData = await this.convertToSupportedFormat(rawImageData);
          
          contentParts.push({
            inlineData: {
              data: imageData.base64Data,
              mimeType: imageData.mimeType
            }
          });
          
          console.log(`üì∑ Using original image: ${rawImageData.mimeType} ${rawImageData.mimeType !== imageData.mimeType ? `(converted to ${imageData.mimeType})` : ''}`);
          
          // Add instruction to transform the provided image
          contentParts[0] = `Transform this interior space image: ${enhancedPrompt}`;
          
        } catch (imageError) {
          console.warn('Failed to fetch original image, proceeding with text-only generation:', imageError);
        }
      }
      
      // Generate the image
      const result = await this.model.generateContent(contentParts);
      const response = await result.response;
      
      // Extract the generated image
      // Note: The actual response format may vary - check Gemini docs for latest format
      const candidates = response.candidates;
      if (!candidates || candidates.length === 0) {
        throw new Error('No image generated by Gemini');
      }
      
      // Get the first candidate (image)
      const candidate = candidates[0];
      let imageUrl = '';
      let base64Data = '';
      
      // Handle different response formats
      if (candidate.content && candidate.content.parts) {
        for (const part of candidate.content.parts) {
          if (part.inlineData && part.inlineData.mimeType?.startsWith('image/')) {
            base64Data = part.inlineData.data;
            // Convert base64 to URL or upload to your storage
            imageUrl = await this.processGeneratedImage(base64Data);
            break;
          }
        }
      }
      
      if (!imageUrl && !base64Data) {
        throw new Error('No image data found in Gemini response');
      }
      
      const generationTime = Date.now() - startTime;
      
      console.log(`‚úÖ Gemini interior design generated successfully in ${generationTime}ms`);
      
      return {
        imageUrl,
        base64Data,
        prompt: enhancedPrompt,
        generationTime,
        model: 'gemini-2.5-flash-image-preview',
        success: true,
        watermarked: true,
        metadata: {
          modelUsed: 'gemini-2.5-flash-image-preview',
          promptLength: enhancedPrompt.length,
          hasOriginalImage: !!request.originalImageUrl
        }
      };
      
    } catch (error) {
      console.error('‚ùå Gemini image generation failed:', error);
      
      return {
        imageUrl: '',
        prompt: request.prompt,
        generationTime: Date.now() - startTime,
        model: 'gemini-2.5-flash-image-preview',
        success: false,
        watermarked: true,
        metadata: {
          modelUsed: 'gemini-2.5-flash-image-preview',
          promptLength: request.prompt.length,
          hasOriginalImage: !!request.originalImageUrl
        }
      };
    }
  }

  /**
   * Fallback response when backend endpoint is not available
   */
  private getFallbackImageResult(request: GeminiImageRequest, startTime: number): GeminiImageResult {
    return {
      imageUrl: '', // No image generated
      base64Data: '',
      prompt: request.prompt,
      generationTime: Date.now() - startTime,
      model: 'fallback-mode',
      success: false,
      watermarked: true,
      metadata: {
        modelUsed: 'backend-not-implemented',
        promptLength: request.prompt.length,
        hasOriginalImage: !!request.originalImageUrl
      }
    };
  }

  /**
   * Enhance prompt specifically for interior design with Gemini
   */
  private enhanceForInteriorDesign(
    basePrompt: string, 
    style: string, 
    qualityLevel: 'draft' | 'standard' | 'premium'
  ): string {
    let enhancedPrompt = basePrompt;
    
    // Add Gemini-specific instructions for interior design
    enhancedPrompt += ` Generate a photorealistic interior design image in ${style} style. `;
    
    // Quality-specific instructions
    switch (qualityLevel) {
      case 'premium':
        enhancedPrompt += `Create a high-fidelity, professional interior design photograph with perfect lighting, detailed textures, and architectural accuracy. `;
        break;
      case 'standard':
        enhancedPrompt += `Create a realistic interior design image with good lighting and clear details. `;
        break;
      default:
        enhancedPrompt += `Create a clear interior design visualization. `;
    }
    
    // Add specific instructions that work well with Gemini
    enhancedPrompt += `The image should be:
- Photorealistic with natural lighting
- Architecturally accurate and proportional
- Showing a complete room view
- With cohesive color coordination
- Including realistic furniture and decor
- Professional interior design quality
- Sharp focus and high detail`;
    
    return enhancedPrompt;
  }

  /**
   * Fetch image from URL and convert to base64 with proper MIME type detection
   */
  private async fetchImageAsBase64(imageUrl: string): Promise<{ base64Data: string; mimeType: string }> {
    try {
      const response = await fetch(imageUrl);
      if (!response.ok) {
        throw new Error(`Failed to fetch image: ${response.statusText}`);
      }
      
      const blob = await response.blob();
      const mimeType = blob.type || this.detectMimeTypeFromUrl(imageUrl);
      
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => {
          const base64String = (reader.result as string).split(',')[1];
          resolve({ base64Data: base64String, mimeType });
        };
        reader.onerror = reject;
        reader.readAsDataURL(blob);
      });
      
    } catch (error) {
      throw new Error(`Failed to convert image to base64: ${error.message}`);
    }
  }

  /**
   * Detect MIME type from file extension as fallback
   */
  private detectMimeTypeFromUrl(url: string): string {
    const extension = url.split('.').pop()?.toLowerCase();
    
    switch (extension) {
      case 'jpg':
      case 'jpeg':
        return 'image/jpeg';
      case 'png':
        return 'image/png';
      case 'gif':
        return 'image/gif';
      case 'webp':
        return 'image/webp';
      case 'bmp':
        return 'image/bmp';
      case 'tiff':
      case 'tif':
        return 'image/tiff';
      case 'svg':
        return 'image/svg+xml';
      case 'heic':
        return 'image/heic';
      case 'heif':
        return 'image/heif';
      case 'avif':
        return 'image/avif';
      default:
        console.warn(`Unknown image extension: ${extension}, defaulting to image/jpeg`);
        return 'image/jpeg';
    }
  }

  /**
   * Validate if image format is supported by Gemini
   */
  private isFormatSupportedByGemini(mimeType: string): boolean {
    const supportedFormats = [
      'image/jpeg',
      'image/png', 
      'image/gif',
      'image/webp',
      'image/bmp',
      'image/tiff',
      'image/heic',
      'image/heif'
    ];
    
    return supportedFormats.includes(mimeType.toLowerCase());
  }

  /**
   * Convert unsupported formats to JPEG (fallback)
   */
  private async convertToSupportedFormat(imageData: { base64Data: string; mimeType: string }): Promise<{ base64Data: string; mimeType: string }> {
    if (this.isFormatSupportedByGemini(imageData.mimeType)) {
      return imageData;
    }
    
    console.warn(`‚ö†Ô∏è Format ${imageData.mimeType} may not be fully supported, converting to JPEG...`);
    
    try {
      // Create an image element to convert format
      const img = new Image();
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      
      return new Promise((resolve, reject) => {
        img.onload = () => {
          canvas.width = img.width;
          canvas.height = img.height;
          
          if (ctx) {
            ctx.drawImage(img, 0, 0);
            const jpegBase64 = canvas.toDataURL('image/jpeg', 0.9).split(',')[1];
            
            resolve({
              base64Data: jpegBase64,
              mimeType: 'image/jpeg'
            });
          } else {
            reject(new Error('Canvas context not available'));
          }
        };
        
        img.onerror = () => reject(new Error('Failed to load image for conversion'));
        img.src = `data:${imageData.mimeType};base64,${imageData.base64Data}`;
      });
      
    } catch (error) {
      console.warn('Format conversion failed, using original:', error);
      return imageData;
    }
  }

  /**
   * Process generated image (convert base64 to URL, upload to storage, etc.)
   */
  private async processGeneratedImage(base64Data: string): Promise<string> {
    try {
      // Option 1: Create data URL for immediate use
      const dataUrl = `data:image/jpeg;base64,${base64Data}`;
      
      // Option 2: Upload to your storage service (recommended for production)
      // const uploadedUrl = await this.uploadToStorage(base64Data);
      // return uploadedUrl;
      
      // For now, return data URL
      return dataUrl;
      
    } catch (error) {
      console.error('Failed to process generated image:', error);
      throw error;
    }
  }

  /**
   * Upload base64 image to your storage service
   */
  private async uploadToStorage(base64Data: string): Promise<string> {
    // Implement your storage upload logic here
    // Examples: Supabase Storage, Firebase Storage, S3, etc.
    
    try {
      const fileName = `generated-design-${Date.now()}.jpg`;
      
      // Example for Supabase Storage:
      // const { data, error } = await supabase.storage
      //   .from('generated-images')
      //   .upload(fileName, base64ToBlob(base64Data));
      
      // Return the public URL
      return `https://your-storage.com/generated-images/${fileName}`;
      
    } catch (error) {
      throw new Error(`Storage upload failed: ${error.message}`);
    }
  }

  /**
   * Test the image generation functionality
   */
  async testImageGeneration(): Promise<void> {
    console.log('üß™ Testing Gemini image generation...');
    
    const testRequest: GeminiImageRequest = {
      prompt: 'A modern Scandinavian living room with white walls, light wood furniture, cozy textiles, and plants. Professional interior design photography.',
      style: 'Scandinavian Modern',
      qualityLevel: 'standard'
    };
    
    try {
      const result = await this.generateInteriorDesign(testRequest);
      
      if (result.success) {
        console.log('‚úÖ Gemini image generation test passed!');
        console.log(`Generated image: ${result.imageUrl.substring(0, 50)}...`);
        console.log(`Generation time: ${result.generationTime}ms`);
      } else {
        console.log('‚ùå Gemini image generation test failed');
      }
      
    } catch (error) {
      console.error('‚ùå Test failed:', error);
    }
  }

  /**
   * Generate multiple variations for A/B testing
   */
  async generateVariations(request: GeminiImageRequest, count: number = 3): Promise<GeminiImageResult[]> {
    const variations = [];
    
    for (let i = 0; i < count; i++) {
      try {
        // Add slight variation to the prompt
        const variedRequest = {
          ...request,
          prompt: `${request.prompt} (Variation ${i + 1}: ${this.getVariationModifier(i)})`
        };
        
        const result = await this.generateInteriorDesign(variedRequest);
        variations.push(result);
        
        // Small delay between requests to respect rate limits
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.error(`Failed to generate variation ${i + 1}:`, error);
      }
    }
    
    return variations;
  }

  /**
   * Get variation modifiers for different image versions
   */
  private getVariationModifier(index: number): string {
    const modifiers = [
      'with warm, cozy lighting',
      'with bright, natural daylight',
      'with elegant, sophisticated ambiance'
    ];
    
    return modifiers[index % modifiers.length];
  }
}

// Export singleton instance
export const geminiImageGenerationService = GeminiImageGenerationService.getInstance();