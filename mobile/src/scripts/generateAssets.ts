/**
 * Comprehensive Asset Generation Script
 * Uses Gemini 2.5 Flash for AI-powered asset creation
 * Based on COMPREHENSIVE-ASSET-REQUIREMENTS.md
 */

// Load environment variables
require('dotenv').config({ path: require('path').join(__dirname, '../../.env') });

const { GoogleGenerativeAI } = require('@google/generative-ai');
const fs = require('fs');
const path = require('path');

interface AssetSpec {
  name: string;
  type: 'svg' | 'jpg' | 'png' | 'webp' | 'mp4' | 'json';
  category: string;
  subcategory?: string;
  description: string;
  prompt: string;
  specs: {
    width?: number;
    height?: number;
    format?: string;
    style?: string;
    colors?: string[];
  };
  priority: 1 | 2 | 3;
}

class AssetGenerator {
  private genAI: any;
  private assetsBasePath: string;
  private generated: string[] = [];
  private failed: string[] = [];

  constructor() {
    // Initialize Gemini AI - check both possible env var names
    const apiKey = process.env.GOOGLE_GEMINI_API_KEY || process.env.EXPO_PUBLIC_GEMINI_API_KEY;
    if (!apiKey) {
      throw new Error('GOOGLE_GEMINI_API_KEY or EXPO_PUBLIC_GEMINI_API_KEY environment variable is required');
    }
    
    this.genAI = new GoogleGenerativeAI(apiKey);
    this.assetsBasePath = path.join(__dirname, '../assets');
    
    console.log('üé® Asset Generator initialized with Gemini 2.5 Flash Image Preview');
    console.log(`üìÅ Assets will be saved to: ${this.assetsBasePath}`);
  }

  /**
   * Generate a single asset using Gemini 2.5 Flash
   */
  async generateAsset(spec: AssetSpec): Promise<boolean> {
    try {
      console.log(`\nüéØ Generating: ${spec.name}`);
      console.log(`üìã Description: ${spec.description}`);
      
      const model = this.genAI.getGenerativeModel({ 
        model: "gemini-2.5-flash-image-preview",
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
        }
      });

      // For image generation, we'll use Gemini's capabilities
      if (spec.type === 'svg' || spec.type === 'jpg' || spec.type === 'png' || spec.type === 'webp') {
        const result = await this.generateImage(model, spec);
        return result;
      } else if (spec.type === 'json') {
        const result = await this.generateLottieAnimation(spec);
        return result;
      } else if (spec.type === 'mp4') {
        const result = await this.generateVideoPlaceholder(spec);
        return result;
      }

      console.log(`‚ö†Ô∏è  Unsupported asset type: ${spec.type}`);
      return false;

    } catch (error) {
      console.error(`‚ùå Failed to generate ${spec.name}:`, error);
      this.failed.push(spec.name);
      return false;
    }
  }

  /**
   * Generate image using Gemini 2.5 Flash Image Preview (same model as the app)
   */
  private async generateImage(model: any, spec: AssetSpec): Promise<boolean> {
    try {
      // Create enhanced prompt for image generation using the same approach as the app
      const enhancedPrompt = this.createImagePrompt(spec);
      
      console.log(`üé® Generating with Gemini 2.5 Flash Image Preview: ${spec.name}`);
      console.log(`üìù Prompt: ${enhancedPrompt.substring(0, 150)}...`);

      // For SVG assets, create them directly since Gemini doesn't generate SVG
      if (spec.type === 'svg') {
        const svgContent = await this.generateSVG(spec, enhancedPrompt);
        const filePath = this.getAssetPath(spec);
        
        // Ensure directory exists
        const dir = path.dirname(filePath);
        if (!fs.existsSync(dir)) {
          fs.mkdirSync(dir, { recursive: true });
        }
        
        fs.writeFileSync(filePath, svgContent);
        console.log(`‚úÖ SVG saved: ${filePath}`);
        
        this.generated.push(spec.name);
        return true;
      }

      // For raster images, use Gemini 2.5 Flash Image Preview
      const result = await model.generateContent([enhancedPrompt]);
      const response = await result.response;
      
      // Extract the generated image
      const candidates = response.candidates;
      if (!candidates || candidates.length === 0) {
        throw new Error('No image generated by Gemini');
      }
      
      // Get the first candidate (image)
      const candidate = candidates[0];
      let base64Data = '';
      
      // Handle different response formats
      if (candidate.content && candidate.content.parts) {
        for (const part of candidate.content.parts) {
          if (part.inlineData && part.inlineData.mimeType?.startsWith('image/')) {
            base64Data = part.inlineData.data;
            break;
          }
        }
      }
      
      if (!base64Data) {
        console.warn(`‚ö†Ô∏è No image data generated for ${spec.name}, creating specification instead`);
        return await this.createSpecificationFile(spec, enhancedPrompt);
      }
      
      // Save the generated image
      const filePath = this.getAssetPath(spec);
      const dir = path.dirname(filePath);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
      
      // Convert base64 to buffer and save
      const imageBuffer = Buffer.from(base64Data, 'base64');
      fs.writeFileSync(filePath, imageBuffer);
      
      console.log(`‚úÖ Image generated and saved: ${filePath}`);
      this.generated.push(spec.name);
      return true;

    } catch (error) {
      console.error(`‚ùå Error generating image for ${spec.name}:`, error);
      
      // Fallback: create specification file
      console.log(`üìã Creating specification file as fallback for ${spec.name}`);
      return await this.createSpecificationFile(spec, this.createImagePrompt(spec));
    }
  }

  /**
   * Create image generation prompt similar to the app's approach
   */
  private createImagePrompt(spec: AssetSpec): string {
    const { colors = ['#C9A98C', '#B9906F', '#1C1C1C'] } = spec.specs;
    
    let prompt = `Create a ${spec.description} for a premium interior design mobile application called "Compozit Vision". `;
    
    // Add specific requirements from the spec
    prompt += `${spec.prompt} `;
    
    // Add quality and style requirements
    prompt += `The image should be:
- Professional, high-quality design
- ${spec.specs.style || 'Modern and clean'} aesthetic  
- Using brand colors: ${colors.join(', ')}
- Optimized for mobile app interface
- ${spec.specs.width || 300}x${spec.specs.height || 200} dimensions
- Premium, sophisticated look
- Clear, crisp details`;

    // Add specific instructions based on category
    if (spec.category === 'photography') {
      prompt += `\n- Photorealistic with natural lighting
- Professional interior photography quality
- Sharp focus and proper exposure
- Showing complete space view`;
    } else if (spec.category === 'icon') {
      prompt += `\n- Clean, minimalist icon design
- Scalable vector-style appearance  
- Clear symbol that communicates the concept
- Professional app icon quality`;
    }

    return prompt;
  }

  /**
   * Create specification file as fallback when image generation fails
   */
  private async createSpecificationFile(spec: AssetSpec, prompt: string): Promise<boolean> {
    const specContent = {
      assetName: spec.name,
      type: spec.type,
      category: spec.category,
      subcategory: spec.subcategory,
      description: spec.description,
      generationPrompt: prompt,
      specifications: spec.specs,
      priority: spec.priority,
      status: 'specification_generated',
      generatedAt: new Date().toISOString(),
      nextSteps: [
        'Use the generation prompt with Gemini 2.5 Flash Image Preview',
        'Ensure brand color compliance',
        'Optimize for mobile performance',
        'Test in actual app context'
      ],
      productionNotes: {
        model: 'gemini-2.5-flash-image-preview',
        suggestedAlternatives: ['Midjourney', 'DALL-E 3', 'Adobe Firefly'],
        estimatedTime: spec.priority === 1 ? '30 minutes' : '15 minutes',
        complexity: spec.priority === 1 ? 'High' : 'Medium'
      }
    };

    const specPath = this.getAssetPath(spec).replace(`.${spec.type}`, '.spec.json');
    const dir = path.dirname(specPath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }

    fs.writeFileSync(specPath, JSON.stringify(specContent, null, 2));
    console.log(`‚úÖ Specification saved: ${specPath}`);
    
    this.generated.push(spec.name);
    return true;
  }

  /**
   * Generate SVG content based on specifications
   */
  private async generateSVG(spec: AssetSpec, aiDescription: string): Promise<string> {
    const { width = 24, height = 24 } = spec.specs;
    const brandColor = '#C9A98C';
    const secondaryColor = '#B9906F';
    const textColor = '#1C1C1C';

    // Create SVG based on asset name and category
    let svgContent = '';

    if (spec.name.includes('icon')) {
      svgContent = this.generateIconSVG(spec, width, height, brandColor);
    } else if (spec.name.includes('illustration')) {
      svgContent = this.generateIllustrationSVG(spec, width, height, brandColor, secondaryColor);
    } else if (spec.name.includes('pattern') || spec.name.includes('background')) {
      svgContent = this.generatePatternSVG(spec, width, height, brandColor);
    } else {
      // Generic SVG
      svgContent = this.generateGenericSVG(spec, width, height, brandColor);
    }

    // Add AI description as metadata
    const metadataComment = `<!-- AI Generated Asset: ${spec.name}
Description: ${spec.description}
AI Creative Direction: ${aiDescription.substring(0, 200)}...
Generated: ${new Date().toISOString()}
-->`;

    return metadataComment + '\n' + svgContent;
  }

  /**
   * Generate icon-specific SVG
   */
  private generateIconSVG(spec: AssetSpec, width: number, height: number, color: string): string {
    const iconName = spec.name.toLowerCase();
    
    // Define icon-specific SVG paths based on name
    let iconPath = '';
    
    if (iconName.includes('camera')) {
      iconPath = `<path d="M12 15.5a3.5 3.5 0 1 1 0-7 3.5 3.5 0 0 1 0 7zM17.5 9h-1.79l-.32-.95-.57-1.69A1 1 0 0 0 14.22 6H9.78a1 1 0 0 0-.95.64l-.54 1.64L7.5 9H5.5A1.5 1.5 0 0 0 4 10.5v7A1.5 1.5 0 0 0 5.5 19h13a1.5 1.5 0 0 0 1.5-1.5v-7A1.5 1.5 0 0 0 17.5 9z" fill="${color}"/>`;
    } else if (iconName.includes('home') || iconName.includes('living-room')) {
      iconPath = `<path d="M12 3l8 6v10a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9l8-6z" fill="none" stroke="${color}" stroke-width="2"/><path d="M9 22V12h6v10" fill="none" stroke="${color}" stroke-width="2"/>`;
    } else if (iconName.includes('bedroom')) {
      iconPath = `<rect x="2" y="12" width="20" height="8" rx="2" fill="${color}" opacity="0.7"/><rect x="4" y="8" width="16" height="6" rx="1" fill="${color}"/>`;
    } else if (iconName.includes('kitchen')) {
      iconPath = `<rect x="4" y="6" width="16" height="12" rx="2" fill="none" stroke="${color}" stroke-width="2"/><path d="M8 6v4M12 6v4M16 6v4" stroke="${color}" stroke-width="2"/>`;
    } else {
      // Generic icon
      iconPath = `<circle cx="12" cy="12" r="8" fill="none" stroke="${color}" stroke-width="2"/><path d="M12 8v4l3 3" stroke="${color}" stroke-width="2"/>`;
    }

    return `<svg width="${width}" height="${height}" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
  ${iconPath}
</svg>`;
  }

  /**
   * Generate illustration SVG
   */
  private generateIllustrationSVG(spec: AssetSpec, width: number, height: number, primary: string, secondary: string): string {
    return `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:${primary};stop-opacity:1" />
      <stop offset="100%" style="stop-color:${secondary};stop-opacity:1" />
    </linearGradient>
  </defs>
  <rect width="100%" height="100%" fill="url(#grad1)" opacity="0.1"/>
  <circle cx="${width/2}" cy="${height/2}" r="${Math.min(width, height)/4}" fill="${primary}" opacity="0.7"/>
  <text x="${width/2}" y="${height/2}" text-anchor="middle" dominant-baseline="central" font-family="Arial, sans-serif" font-size="${Math.min(width, height)/8}" fill="#1C1C1C">${spec.name.split('-')[0].toUpperCase()}</text>
</svg>`;
  }

  /**
   * Generate pattern SVG
   */
  private generatePatternSVG(spec: AssetSpec, width: number, height: number, color: string): string {
    return `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <pattern id="pattern" x="0" y="0" width="20" height="20" patternUnits="userSpaceOnUse">
      <circle cx="10" cy="10" r="2" fill="${color}" opacity="0.1"/>
    </pattern>
  </defs>
  <rect width="100%" height="100%" fill="url(#pattern)"/>
</svg>`;
  }

  /**
   * Generate generic SVG
   */
  private generateGenericSVG(spec: AssetSpec, width: number, height: number, color: string): string {
    return `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="${color}" opacity="0.2" rx="4"/>
  <text x="${width/2}" y="${height/2}" text-anchor="middle" dominant-baseline="central" font-family="Arial, sans-serif" font-size="10" fill="#1C1C1C">${spec.name}</text>
</svg>`;
  }


  /**
   * Generate Lottie animation placeholder
   */
  private async generateLottieAnimation(spec: AssetSpec): Promise<boolean> {
    const lottieTemplate = {
      v: "5.5.7",
      meta: { g: "LottieFiles AE 3.1.1", a: "", k: "", d: "", tc: "" },
      fr: 30,
      ip: 0,
      op: 90,
      w: spec.specs.width || 200,
      h: spec.specs.height || 200,
      nm: spec.name,
      ddd: 0,
      assets: [],
      layers: [
        {
          ddd: 0,
          ind: 1,
          ty: 4,
          nm: "Shape Layer 1",
          sr: 1,
          ks: {
            o: { a: 0, k: 100, ix: 11 },
            r: { a: 1, k: [{ i: { x: [0.667], y: [1] }, o: { x: [0.333], y: [0] }, t: 0, s: [0] }, { t: 89, s: [360] }], ix: 10 },
            p: { a: 0, k: [100, 100, 0], ix: 2 },
            a: { a: 0, k: [0, 0, 0], ix: 1 },
            s: { a: 0, k: [100, 100, 100], ix: 6 }
          },
          ao: 0,
          shapes: [
            {
              ty: "el",
              p: { a: 0, k: [0, 0], ix: 3 },
              s: { a: 0, k: [50, 50], ix: 2 },
              nm: "Ellipse Path 1"
            },
            {
              ty: "fl",
              c: { a: 0, k: [0.788, 0.663, 0.549, 1], ix: 4 },
              o: { a: 0, k: 100, ix: 5 },
              r: 1,
              bm: 0,
              nm: "Fill 1"
            }
          ],
          ip: 0,
          op: 90,
          st: 0,
          bm: 0
        }
      ],
      markers: []
    };

    const filePath = this.getAssetPath(spec);
    const dir = path.dirname(filePath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }

    fs.writeFileSync(filePath, JSON.stringify(lottieTemplate, null, 2));
    console.log(`‚úÖ Lottie animation placeholder saved: ${filePath}`);
    
    this.generated.push(spec.name);
    return true;
  }

  /**
   * Generate video placeholder
   */
  private async generateVideoPlaceholder(spec: AssetSpec): Promise<boolean> {
    const placeholder = {
      assetName: spec.name,
      type: 'mp4',
      description: spec.description,
      specifications: {
        duration: '15-20 seconds',
        resolution: '1080p',
        format: 'H.264',
        size: '<10MB',
        fps: 30
      },
      productionRequirements: {
        content: spec.description,
        style: 'Premium, professional, mobile-optimized',
        tools: ['After Effects', 'Premiere Pro', 'Final Cut Pro'],
        estimatedCost: '$500-2000',
        estimatedTime: '1-3 days'
      },
      status: 'placeholder',
      generatedAt: new Date().toISOString()
    };

    const specPath = this.getAssetPath(spec).replace('.mp4', '.video-spec.json');
    const dir = path.dirname(specPath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }

    fs.writeFileSync(specPath, JSON.stringify(placeholder, null, 2));
    console.log(`‚úÖ Video specification saved: ${specPath}`);
    
    this.generated.push(spec.name);
    return true;
  }

  /**
   * Get the full file path for an asset
   */
  private getAssetPath(spec: AssetSpec): string {
    let categoryPath = '';
    
    if (spec.category === 'icon') {
      categoryPath = `icons/${spec.subcategory || 'misc'}`;
    } else if (spec.category === 'photography') {
      categoryPath = `images/photography/${spec.subcategory || 'misc'}`;
    } else if (spec.category === 'illustration') {
      categoryPath = `images/illustrations/${spec.subcategory || 'misc'}`;
    } else if (spec.category === 'animation') {
      categoryPath = `animations/${spec.type === 'mp4' ? 'videos' : 'lottie'}/${spec.subcategory || 'misc'}`;
    } else if (spec.category === 'brand') {
      categoryPath = `brand/${spec.subcategory || 'misc'}`;
    } else {
      categoryPath = 'misc';
    }

    return path.join(this.assetsBasePath, categoryPath, `${spec.name}.${spec.type}`);
  }

  /**
   * Generate all assets based on priority
   */
  async generateAllAssets(): Promise<void> {
    console.log('üöÄ Starting comprehensive asset generation...');
    
    const assets = this.getAssetSpecs();
    
    // Sort by priority (1 = highest priority)
    const sortedAssets = assets.sort((a, b) => a.priority - b.priority);
    
    console.log(`üìä Total assets to generate: ${assets.length}`);
    console.log(`üéØ Priority 1: ${assets.filter(a => a.priority === 1).length} assets`);
    console.log(`üéØ Priority 2: ${assets.filter(a => a.priority === 2).length} assets`);
    console.log(`üéØ Priority 3: ${assets.filter(a => a.priority === 3).length} assets`);

    let completed = 0;
    const total = assets.length;

    for (const asset of sortedAssets) {
      console.log(`\nüìà Progress: ${completed}/${total} (${Math.round(completed/total*100)}%)`);
      
      const success = await this.generateAsset(asset);
      if (success) {
        completed++;
      }
      
      // Add small delay to avoid rate limiting
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    this.printSummary();
  }

  /**
   * Print generation summary
   */
  private printSummary(): void {
    console.log('\n\nüéâ ASSET GENERATION COMPLETE!');
    console.log('=' .repeat(50));
    console.log(`‚úÖ Successfully generated: ${this.generated.length} assets`);
    console.log(`‚ùå Failed to generate: ${this.failed.length} assets`);
    
    if (this.failed.length > 0) {
      console.log('\n‚ùå Failed assets:');
      this.failed.forEach(name => console.log(`  - ${name}`));
    }
    
    console.log(`\nüìÅ Assets saved to: ${this.assetsBasePath}`);
    console.log('\nüöÄ Next steps:');
    console.log('1. Review generated placeholders and specifications');
    console.log('2. Replace placeholders with actual professional assets');
    console.log('3. Optimize all assets for mobile performance');
    console.log('4. Integrate assets into the app');
    console.log('5. Test assets across different devices and screen sizes');
  }

  /**
   * Define all asset specifications from requirements
   */
  private getAssetSpecs(): AssetSpec[] {
    return [
      // Priority 1: Essential Icons - Categories
      {
        name: 'interior-design-icon',
        type: 'svg',
        category: 'icon',
        subcategory: 'categories',
        description: 'Interior spaces icon for category selection',
        prompt: 'Modern, clean icon representing interior design with furniture silhouettes, warm brand colors',
        specs: { width: 32, height: 32, style: 'minimalist', colors: ['#C9A98C', '#B9906F'] },
        priority: 1
      },
      {
        name: 'garden-landscape-icon',
        type: 'svg',
        category: 'icon',
        subcategory: 'categories',
        description: 'Garden/landscape icon for outdoor design category',
        prompt: 'Stylized garden elements with plants and landscaping, nature-inspired design',
        specs: { width: 32, height: 32, style: 'organic', colors: ['#C9A98C', '#7FB069'] },
        priority: 1
      },
      {
        name: 'surface-materials-icon',
        type: 'svg',
        category: 'icon',
        subcategory: 'categories',
        description: 'Surfaces/materials icon for textures and finishes',
        prompt: 'Abstract representation of different textures and materials, sophisticated design',
        specs: { width: 32, height: 32, style: 'geometric', colors: ['#C9A98C', '#B9906F'] },
        priority: 1
      },
      {
        name: 'furniture-objects-icon',
        type: 'svg',
        category: 'icon',
        subcategory: 'categories',
        description: 'Furniture/objects icon for product category',
        prompt: 'Elegant furniture silhouettes arranged artistically, premium feel',
        specs: { width: 32, height: 32, style: 'elegant', colors: ['#C9A98C', '#B9906F'] },
        priority: 1
      },
      {
        name: 'exterior-architecture-icon',
        type: 'svg',
        category: 'icon',
        subcategory: 'categories',
        description: 'Exterior/architecture icon for building design',
        prompt: 'Architectural elements and building silhouette, professional and structured',
        specs: { width: 32, height: 32, style: 'architectural', colors: ['#C9A98C', '#1C1C1C'] },
        priority: 1
      },

      // Priority 1: Essential Icons - Navigation
      {
        name: 'camera-capture-icon',
        type: 'svg',
        category: 'icon',
        subcategory: 'navigation',
        description: 'Custom camera icon for photo capture action',
        prompt: 'Modern camera icon with AI elements, exciting and action-oriented design',
        specs: { width: 24, height: 24, style: 'modern', colors: ['#C9A98C'] },
        priority: 1
      },
      {
        name: 'project-plus-icon',
        type: 'svg',
        category: 'icon',
        subcategory: 'navigation',
        description: 'Custom project creation icon',
        prompt: 'Plus icon with creative design elements, inspiring possibility and creativity',
        specs: { width: 24, height: 24, style: 'creative', colors: ['#C9A98C'] },
        priority: 1
      },

      // Priority 1: Essential Icons - Room Types
      {
        name: 'living-room-icon',
        type: 'svg',
        category: 'icon',
        subcategory: 'features',
        description: 'Stylized living room icon for space selection',
        prompt: 'Elegant living room silhouette with sofa and table, sophisticated and welcoming',
        specs: { width: 48, height: 48, style: 'sophisticated', colors: ['#C9A98C', '#B9906F'] },
        priority: 1
      },
      {
        name: 'bedroom-icon',
        type: 'svg',
        category: 'icon',
        subcategory: 'features',
        description: 'Elegant bedroom icon for room type selection',
        prompt: 'Minimalist bedroom silhouette with bed and nightstand, peaceful and elegant',
        specs: { width: 48, height: 48, style: 'peaceful', colors: ['#C9A98C', '#B9906F'] },
        priority: 1
      },
      {
        name: 'kitchen-icon',
        type: 'svg',
        category: 'icon',
        subcategory: 'features',
        description: 'Modern kitchen icon for space type',
        prompt: 'Clean kitchen silhouette with cabinets and appliances, modern and functional',
        specs: { width: 48, height: 48, style: 'modern', colors: ['#C9A98C', '#B9906F'] },
        priority: 1
      },
      {
        name: 'bathroom-icon',
        type: 'svg',
        category: 'icon',
        subcategory: 'features',
        description: 'Spa-like bathroom icon',
        prompt: 'Elegant bathroom elements with bathtub or shower, spa-like and luxurious',
        specs: { width: 48, height: 48, style: 'luxurious', colors: ['#C9A98C', '#B9906F'] },
        priority: 1
      },
      {
        name: 'dining-room-icon',
        type: 'svg',
        category: 'icon',
        subcategory: 'features',
        description: 'Sophisticated dining room icon',
        prompt: 'Elegant dining table and chairs silhouette, sophisticated and social',
        specs: { width: 48, height: 48, style: 'elegant', colors: ['#C9A98C', '#B9906F'] },
        priority: 1
      },
      {
        name: 'home-office-icon',
        type: 'svg',
        category: 'icon',
        subcategory: 'features',
        description: 'Professional home office icon',
        prompt: 'Clean desk and chair setup, professional and productive atmosphere',
        specs: { width: 48, height: 48, style: 'professional', colors: ['#C9A98C', '#B9906F'] },
        priority: 1
      },

      // Priority 2: Photography Assets - Style Showcases
      {
        name: 'modern-style-showcase',
        type: 'webp',
        category: 'photography',
        subcategory: 'styles',
        description: 'Clean modern interior showcase',
        prompt: 'Professional photograph of a modern interior with clean lines, minimal furniture, neutral colors, excellent lighting',
        specs: { width: 300, height: 200, style: 'modern', format: 'webp' },
        priority: 2
      },
      {
        name: 'minimalist-style-showcase',
        type: 'webp',
        category: 'photography',
        subcategory: 'styles',
        description: 'Pure minimalist space showcase',
        prompt: 'Ultra-minimal interior with few elements, maximum white space, perfect lighting, zen-like atmosphere',
        specs: { width: 300, height: 200, style: 'minimalist', format: 'webp' },
        priority: 2
      },
      {
        name: 'scandinavian-style-showcase',
        type: 'webp',
        category: 'photography',
        subcategory: 'styles',
        description: 'Nordic hygge design showcase',
        prompt: 'Cozy Scandinavian interior with light wood, white walls, hygge elements, natural lighting',
        specs: { width: 300, height: 200, style: 'scandinavian', format: 'webp' },
        priority: 2
      },

      // Priority 2: Animations - AI Processing
      {
        name: 'ai-brain-processing',
        type: 'json',
        category: 'animation',
        subcategory: 'ai-processing',
        description: 'Neural network processing animation',
        prompt: 'Sophisticated animation showing AI neural network thinking, nodes connecting, data flowing',
        specs: { width: 200, height: 200, style: 'technical' },
        priority: 2
      },
      {
        name: 'room-analysis-animation',
        type: 'json',
        category: 'animation',
        subcategory: 'ai-processing',
        description: 'Room being analyzed by AI',
        prompt: 'Animation of AI scanning and understanding a room, highlighting different elements',
        specs: { width: 200, height: 200, style: 'analytical' },
        priority: 2
      },

      // Priority 3: Brand Assets
      {
        name: 'compozit-logo-primary',
        type: 'svg',
        category: 'brand',
        subcategory: 'logos',
        description: 'Primary Compozit Vision logo',
        prompt: 'Professional logo for interior design AI app, combining home and AI elements, premium typography',
        specs: { width: 200, height: 60, style: 'premium', colors: ['#C9A98C', '#1C1C1C'] },
        priority: 3
      },
      {
        name: 'home-hero-gradient',
        type: 'svg',
        category: 'brand',
        subcategory: 'patterns',
        description: 'Subtle geometric background pattern for home screen',
        prompt: 'Subtle geometric pattern with brand colors, very low opacity, welcoming and professional',
        specs: { width: 400, height: 600, style: 'geometric', colors: ['#C9A98C'] },
        priority: 3
      }
    ];
  }
}

// Main execution
async function main() {
  try {
    const generator = new AssetGenerator();
    await generator.generateAllAssets();
  } catch (error) {
    console.error('üí• Fatal error:', error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  main();
}

module.exports = { AssetGenerator };