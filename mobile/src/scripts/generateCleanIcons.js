/**
 * Clean Icon Generation Script
 * Generates clean cutout icons with solid colors, NO text, NO filters
 * Uses Gemini 2.5 Flash Image Preview
 */

require('dotenv').config({ path: require('path').join(__dirname, '../../.env') });

const { GoogleGenerativeAI } = require('@google/generative-ai');
const fs = require('fs');
const path = require('path');

class CleanIconGenerator {
  constructor() {
    const apiKey = process.env.GOOGLE_GEMINI_API_KEY || process.env.EXPO_PUBLIC_GEMINI_API_KEY;
    if (!apiKey) {
      throw new Error('GOOGLE_GEMINI_API_KEY or EXPO_PUBLIC_GEMINI_API_KEY environment variable is required');
    }
    
    this.genAI = new GoogleGenerativeAI(apiKey);
    this.assetsBasePath = path.join(__dirname, '../assets');
    this.generated = [];
    this.failed = [];
    
    console.log('üé® Clean Icon Generator initialized');
    console.log(`üìÅ Icons will be saved to: ${this.assetsBasePath}`);
  }

  /**
   * Generate clean cutout icon
   */
  async generateIcon(spec) {
    try {
      console.log(`\nüéØ Generating: ${spec.name}`);
      console.log(`üìê Size: ${spec.width}x${spec.height}px`);
      
      const model = this.genAI.getGenerativeModel({ 
        model: "gemini-2.5-flash-image-preview",
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
        }
      });

      // Create clean icon prompt
      const cleanPrompt = this.createCleanIconPrompt(spec);
      console.log(`ü§ñ Clean Prompt: ${cleanPrompt.substring(0, 100)}...`);

      const result = await model.generateContent([cleanPrompt]);
      const response = await result.response;
      
      // Extract image data
      const candidates = response.candidates;
      if (!candidates || candidates.length === 0) {
        throw new Error('No image generated by Gemini');
      }
      
      const candidate = candidates[0];
      let base64Data = '';
      
      if (candidate.content && candidate.content.parts) {
        for (const part of candidate.content.parts) {
          if (part.inlineData && part.inlineData.mimeType?.startsWith('image/')) {
            base64Data = part.inlineData.data;
            break;
          }
        }
      }
      
      if (!base64Data) {
        console.warn(`‚ö†Ô∏è No image data generated for ${spec.name}`);
        this.failed.push(spec.name);
        return false;
      }
      
      // Save the generated clean icon
      const filePath = this.getIconPath(spec);
      const dir = path.dirname(filePath);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
      
      const imageBuffer = Buffer.from(base64Data, 'base64');
      fs.writeFileSync(filePath, imageBuffer);
      
      console.log(`‚úÖ Clean icon saved: ${filePath}`);
      this.generated.push(spec.name);
      return true;

    } catch (error) {
      console.error(`‚ùå Failed to generate ${spec.name}:`, error.message);
      this.failed.push(spec.name);
      return false;
    }
  }

  /**
   * Create clean icon prompt - NO TEXT, NO FILTERS
   */
  createCleanIconPrompt(spec) {
    const iconContent = this.getIconContent(spec.name);
    
    return `Generate a clean, professional mobile app icon.

STRICT REQUIREMENTS:
- NO TEXT, letters, words, or labels anywhere in the image
- NO sepia, vintage, or photo filters
- Clean cutout style with solid colors only
- Size: ${spec.width}x${spec.height} pixels
- Colors: #C9A98C (primary), #B9906F (details), white/transparent background

ICON DESIGN:
${iconContent}

VISUAL STYLE:
- Modern, minimalist app icon style  
- Bold, clear silhouette that works at small sizes
- Solid color fills, no gradients
- Clean geometric shapes
- Professional, crisp appearance
- Simple, recognizable design

OUTPUT: Create a clean icon with solid colors representing "${spec.description}" - NO TEXT OR FILTERS.`;
  }

  /**
   * Get specific icon content for each type
   */
  getIconContent(iconName) {
    const name = iconName.toLowerCase();
    
    const iconMap = {
      'interior-design': 'House outline with simple furniture silhouettes inside (sofa, table)',
      'garden-landscape': 'Stylized tree and plant shapes in natural arrangement',
      'surface-materials': 'Layered geometric squares/rectangles showing different textures',
      'furniture-objects': 'Chair and table silhouettes in clean, modern style',
      'exterior-architecture': 'Building silhouette with columns or architectural elements',
      'camera-capture': 'Modern camera body with lens, clean geometric design',
      'project-plus': 'Plus symbol (+) with creative corner elements',
      'living-room': 'Sofa and coffee table arrangement, top-down view',
      'bedroom': 'Bed with headboard, simple bedside elements',
      'kitchen': 'Kitchen cabinets and appliances outline',
      'bathroom': 'Bathtub or shower silhouette, clean bathroom fixtures',
      'dining-room': 'Dining table with chairs arrangement from above',
      'home-office': 'Desk with chair and computer/laptop silhouette',
      'step-scanning': 'Radar circle with scanning waves, analysis symbol',
      'step-understanding': 'Simple brain or neural network with connected dots',
      'step-generating': 'Gear or building/construction symbol',
      'step-optimizing': 'Upward arrow with optimization lines',
      'unlimited-projects': 'Infinity symbol (‚àû) with folder elements',
      'priority-support': 'Headset or support communication symbol',
      'advanced-ai': 'Brain with simple circuit/tech patterns',
      'export-options': 'Arrow pointing out of box, sharing/export symbol',
      'collaboration': 'Multiple person silhouettes connected together',
      'lighting-tip': 'Light bulb or lamp symbol, illumination icon',
      'composition-tip': 'Grid lines or frame guides, composition symbol',
      'quality-tip': 'Checkmark or quality star symbol',
      'ai-search': 'Magnifying glass with AI brain enhancement',
      'hallway': 'Corridor perspective, simple hallway passage',
      'outdoor-space': 'Patio furniture with plants, outdoor living area'
    };

    // Find matching icon description
    for (const [key, description] of Object.entries(iconMap)) {
      if (name.includes(key)) {
        return description;
      }
    }

    // Fallback for unmatched icons
    return `Simple geometric representation of ${name.replace(/-/g, ' ').replace('icon', '').trim()}`;
  }

  /**
   * Get icon file path
   */
  getIconPath(spec) {
    const subcategory = spec.subcategory || 'misc';
    return path.join(this.assetsBasePath, 'icons', subcategory, `${spec.name}.png`);
  }

  /**
   * Get all icon specifications - CLEAN ICONS ONLY
   */
  getCleanIconSpecs() {
    return [
      // Category Icons
      { name: 'interior-design-icon', width: 64, height: 64, subcategory: 'categories', description: 'Interior spaces category' },
      { name: 'garden-landscape-icon', width: 64, height: 64, subcategory: 'categories', description: 'Garden/landscape category' },
      { name: 'surface-materials-icon', width: 64, height: 64, subcategory: 'categories', description: 'Surfaces/materials category' },
      { name: 'furniture-objects-icon', width: 64, height: 64, subcategory: 'categories', description: 'Furniture/objects category' },
      { name: 'exterior-architecture-icon', width: 64, height: 64, subcategory: 'categories', description: 'Exterior/architecture category' },

      // Navigation Icons  
      { name: 'camera-capture-icon', width: 48, height: 48, subcategory: 'navigation', description: 'Photo capture action' },
      { name: 'project-plus-icon', width: 48, height: 48, subcategory: 'navigation', description: 'Project creation' },
      { name: 'ai-search-icon', width: 32, height: 32, subcategory: 'navigation', description: 'AI-powered search' },

      // Room Feature Icons
      { name: 'living-room-icon', width: 96, height: 96, subcategory: 'features', description: 'Living room space' },
      { name: 'bedroom-icon', width: 96, height: 96, subcategory: 'features', description: 'Bedroom space' },
      { name: 'kitchen-icon', width: 96, height: 96, subcategory: 'features', description: 'Kitchen space' },
      { name: 'bathroom-icon', width: 96, height: 96, subcategory: 'features', description: 'Bathroom space' },
      { name: 'dining-room-icon', width: 96, height: 96, subcategory: 'features', description: 'Dining room space' },
      { name: 'home-office-icon', width: 96, height: 96, subcategory: 'features', description: 'Home office space' },
      { name: 'hallway-icon', width: 96, height: 96, subcategory: 'features', description: 'Hallway/corridor space' },
      { name: 'outdoor-space-icon', width: 96, height: 96, subcategory: 'features', description: 'Outdoor/patio space' },

      // AI Processing Icons
      { name: 'step-scanning-icon', width: 80, height: 80, subcategory: 'features', description: 'Scanning/analysis step' },
      { name: 'step-understanding-icon', width: 80, height: 80, subcategory: 'features', description: 'Understanding/processing step' },
      { name: 'step-generating-icon', width: 80, height: 80, subcategory: 'features', description: 'Generation/creation step' },
      { name: 'step-optimizing-icon', width: 80, height: 80, subcategory: 'features', description: 'Optimization/refinement step' },

      // Feature Icons
      { name: 'unlimited-projects-icon', width: 64, height: 64, subcategory: 'features', description: 'Unlimited projects feature' },
      { name: 'priority-support-icon', width: 64, height: 64, subcategory: 'features', description: 'Priority support feature' },
      { name: 'advanced-ai-icon', width: 64, height: 64, subcategory: 'features', description: 'Advanced AI capabilities' },
      { name: 'export-options-icon', width: 64, height: 64, subcategory: 'features', description: 'Export/sharing options' },
      { name: 'collaboration-icon', width: 64, height: 64, subcategory: 'features', description: 'Team collaboration feature' },

      // Tip Icons
      { name: 'lighting-tip-icon', width: 32, height: 32, subcategory: 'features', description: 'Lighting indicator' },
      { name: 'composition-tip-icon', width: 32, height: 32, subcategory: 'features', description: 'Composition guide' },
      { name: 'quality-tip-icon', width: 32, height: 32, subcategory: 'features', description: 'Quality assessment' }
    ];
  }

  /**
   * Generate all clean icons
   */
  async generateAllCleanIcons() {
    console.log('üöÄ Starting Clean Icon Generation...');
    console.log('Pure cutout icons with solid colors, NO TEXT, NO FILTERS');
    console.log('‚ïê'.repeat(60));
    
    const iconSpecs = this.getCleanIconSpecs();
    const total = iconSpecs.length;
    
    console.log(`üìä Total clean icons to generate: ${total}`);
    
    let completed = 0;
    let failed = 0;

    for (const spec of iconSpecs) {
      const progress = `(${completed + failed + 1}/${total})`;
      console.log(`\nüéØ Generating clean icon: ${spec.name} ${progress}`);
      
      const success = await this.generateIcon(spec);
      if (success) {
        completed++;
      } else {
        failed++;
      }
      
      // Rate limiting delay
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    console.log('\n' + '‚ïê'.repeat(60));
    console.log('üéâ CLEAN ICON GENERATION COMPLETE!');
    console.log(`‚úÖ Successfully generated: ${completed} clean icons`);
    console.log(`‚ùå Failed to generate: ${failed} icons`);
    console.log(`üìà Success rate: ${Math.round(completed/total*100)}%`);
    
    console.log('\nüé® Generated Features:');
    console.log('   ‚úÖ Clean cutout style with solid colors');
    console.log('   ‚úÖ NO text or labels anywhere');
    console.log('   ‚úÖ NO sepia or vintage filters');
    console.log('   ‚úÖ Brand-consistent colors (#C9A98C, #B9906F)');
    console.log('   ‚úÖ Multiple sizes optimized for different uses');
    
    console.log('\nüìÅ Icons saved to:');
    console.log('   - src/assets/icons/categories/ (64x64px)');
    console.log('   - src/assets/icons/navigation/ (48x48px, 32x32px)');
    console.log('   - src/assets/icons/features/ (96x96px, 80x80px, 64x64px, 32x32px)');
  }
}

// CLI interface
async function main() {
  const generator = new CleanIconGenerator();
  const mode = process.argv[2] || 'all';
  
  try {
    if (mode === 'test') {
      console.log('üß™ Running TEST mode (first 5 clean icons)');
      const iconSpecs = generator.getCleanIconSpecs().slice(0, 5);
      
      for (const spec of iconSpecs) {
        console.log(`\nüéØ Testing: ${spec.name}`);
        await generator.generateIcon(spec);
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
      
      console.log('\n‚úÖ Clean icon test complete!');
    } else {
      await generator.generateAllCleanIcons();
    }
  } catch (error) {
    console.error('üí• Clean icon generation failed:', error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  main();
}

module.exports = { CleanIconGenerator };